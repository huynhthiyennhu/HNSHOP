@model List<HNSHOP.Dtos.Response.OrderResDto>
@using HNSHOP.Utils.EnumTypes
@using System.Net
@{
    ViewData["Title"] = "Danh Sách Đơn Hàng";

}
<section id="cart_items">
    <div class="container p-5">
        <div class="breadcrumbs">
            <ol class="breadcrumb">
                <li><a asp-controller="Home" asp-action="Index">Home</a></li>
                <li class="active">Danh Sách Đơn Hàng</li>
            </ol>
        </div>
<section class="category-tab shop-details-tab">
    <div class="container">
        <div class="col-sm-12">
            <ul class="nav nav-tabs">
                <li class="active"><a href="#processing" data-toggle="tab">Đang xử lý</a></li>
                <li><a href="#shipping" data-toggle="tab">Đang giao</a></li>
                <li><a href="#delivered" data-toggle="tab">Đã giao</a></li>
                <li><a href="#completed" data-toggle="tab">Hoàn tất</a></li>
                <li><a href="#rating" data-toggle="tab">Chờ đánh giá</a></li>
            </ul>
        </div>

        <div class="tab-content">
            <div class="tab-pane fade active in" id="processing">
                @Html.Raw(RenderSubOrders(Model, SubOrderStatus.Pending))
            </div>
            <div class="tab-pane fade" id="shipping">
                @Html.Raw(RenderSubOrders(Model, SubOrderStatus.Shipping))
            </div>
            <div class="tab-pane fade" id="delivered">
                @Html.Raw(RenderSubOrders(Model, SubOrderStatus.Delivered))
            </div>
            <div class="tab-pane fade" id="completed">
                @Html.Raw(RenderSubOrders(Model, SubOrderStatus.Completed))
            </div>
            <div class="tab-pane fade" id="rating">
                @Html.Raw(RenderSubOrders(Model, SubOrderStatus.Completed, onlyUnrated: true))
            </div>
        </div>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success mt-3">@TempData["SuccessMessage"]</div>
        }
    </div>
</section>
</div>
</section>
@section Scripts {
    <script>
        function toggleProducts(id, link) {
        const el = document.getElementById(id)
        if (el.style.display === "none") {
        el.style.display = "block"
        link.innerText = "Ẩn bớt"
        } else {
        el.style.display = "none"
        link.innerText = "Xem tất cả sản phẩm"
        }
        }
    </script>
}
@functions {
    private string RenderSubOrders(List<HNSHOP.Dtos.Response.OrderResDto> orders, SubOrderStatus filterStatus, bool onlyUnrated = false)
    {
        var ratedPairs = ViewBag.RatedProductPairs as List<dynamic>;

        var filteredSubOrders = orders
            .SelectMany(o => o.SubOrders.Select(so => new { Order = o, SubOrder = so }))
            .Where(x => x.SubOrder.Status == filterStatus &&
                        (!onlyUnrated || (ratedPairs != null &&
                            x.SubOrder.DetailOrders.Any(d =>
                                d.Product != null &&
                                !ratedPairs.Any(r => r.ProductId == d.Product.Id && r.SubOrderId == x.SubOrder.Id)))))
            .ToList();

        if (!filteredSubOrders.Any())
        {
            return "<p class='text-muted text-center'>Không có đơn hàng nào trong trạng thái này.</p>";
        }

        var html = "";

        foreach (var entry in filteredSubOrders)
        {
            var order = entry.Order;
            var subOrder = entry.SubOrder;
            var modalId = $"confirmModal-{order.Id}-{subOrder.ShopId}";
            var blockId = $"products-{subOrder.Id}";
            string shopName = WebUtility.HtmlEncode(subOrder.ShopName);
            string statusBadge = GetStatusBadge(subOrder.Status);

            html += "<div class='shop-section mb-4 p-3 border rounded bg-white shadow-sm'>";
            html += $"<h5 class='shop-title mb-3 text-primary font-weight-bold'>🛍 Shop: {shopName}" +
                    $"<small class='ml-2'>{statusBadge}</small></h5>";

            // Hiển thị sản phẩm đầu tiên
            var firstProduct = subOrder.DetailOrders.FirstOrDefault(d => d.Product != null);
            if (firstProduct != null)
            {
                var p = firstProduct.Product;
                var name = WebUtility.HtmlEncode(p.Name);
                var img = p.Images?.FirstOrDefault()?.Path ?? "no-image.png";
                var discount = p.DiscountPercent;
                var price = p.Price;
                var finalPrice = price * (1 - (decimal)discount / 100);

                html += "<table class='table mb-0'>";
                html += "<tr class='align - middle border - 0'>";
                html += $"<td style='width: 70px; boder:none;'><img src='/images/hnshop/{img}' class='img-fluid rounded border' style='width:70px;height:70px;object-fit:cover;' /></td>";
                html += "<td style='vertical-align: top;'>";
                html += $"<div class='font-weight-bold'>{name}</div>";
                html += $"<div class='text-muted small'>Đơn giá: {price:N0} VNĐ";
                if (discount > 0)
                    html += $" <span class='text-danger ml-2'>-{discount:0.#}%</span>";
                html += $"</div><div class='text-muted small'>Số lượng: {firstProduct.Quantity}</div>";
                html += $"<div class='text-danger font-weight-bold mt-1'>{(finalPrice * firstProduct.Quantity):N0} VNĐ</div>";
                html += "</td>";
                html += "</tr>";
                html += "</table>";

            }

            // Nút xem tất cả
            if (subOrder.DetailOrders.Count > 1)
            {
                html += $"<div class='mb-2'><a href='javascript:void(0)' onclick='toggleProducts(\"{blockId}\", this)'>Xem tất cả sản phẩm</a></div>";
            }

            // Danh sách sản phẩm còn lại
            html += $"<div id='{blockId}' style='display:none;'>";
            foreach (var item in subOrder.DetailOrders.Skip(1))
            {
                var p = item.Product;
                if (p == null) continue;
                var name = WebUtility.HtmlEncode(p.Name);
                var img = p.Images?.FirstOrDefault()?.Path ?? "no-image.png";
                var discount = p.DiscountPercent;
                var price = p.Price;
                var finalPrice = price * (1 - (decimal)discount / 100);

                html += "<table class='table mb-0'>";
                html += "<tr class='align - middle border - 0'>";
                html += $"<td style='width: 60px; boder:none;'><img src='/images/hnshop/{img}' class='img-fluid rounded border ' style='width:60px;height:60px;object-fit:cover;' /></td>";
                html += "<td style='vertical-align: top;'>";
                html += $"<div class='font-weight-bold'>{name}</div>";
                html += $"<div class='text-muted small'>Đơn giá: {item.UnitPrice:N0} VNĐ</div>";
                html += $"<div class='text-muted small'>Số lượng: {item.Quantity}</div>";
                html += $"<div class='text-danger font-weight-bold mt-1'>{(finalPrice * item.Quantity):N0} VNĐ</div>";
                html += "</td>";
                html += "</tr>";
                html += "</table>";

            }
            html += "</div>";

            // Tổng tiền
            var totalPrice = subOrder.DetailOrders.Sum(i =>
                (i.Product.Price * (1 - (decimal)i.Product.DiscountPercent / 100)) * i.Quantity);
            html += "</br>";

            html += "<b>";
            html += $"<div class='d-flex justify-content-end mt-2 font-weight-bold'>Tổng tiền shop: <span class='text-danger ml-2'>{totalPrice:N0} VNĐ</span></div>";
            html += "</b>";
            // Hành động
            html += "<div class='text-right mt-3' style='margin-right:50px;'>";
            html += $"<a href='/Orders/Details/{order.Id}' class='btn btn-outline-info btn-sm'>Chi tiết đơn</a> ";

            bool hasUnrated = subOrder.DetailOrders.Any(d =>
                d.Product != null &&
                ratedPairs != null &&
                !ratedPairs.Any(r => r.ProductId == d.Product.Id && r.SubOrderId == subOrder.Id));

            if (subOrder.Status == SubOrderStatus.Completed && hasUnrated)
            {
                html += $"<a href='/Ratings/Create?subOrderId={subOrder.Id}' class='btn btn-warning btn-sm ml-2'>Đánh giá</a>";
            }

            if (subOrder.Status == SubOrderStatus.Delivered)
            {
                html += $@"
                    <button class='btn btn-success btn-sm ml-2' data-toggle='modal' data-target='#{modalId}'>
                        Đã nhận hàng
                    </button>
                    <div class='modal fade' id='{modalId}' tabindex='-1' role='dialog'>
                        <div class='modal-dialog' role='document'>
                            <div class='modal-content'>
                                <form method='post' action='/Orders/ConfirmReceived/{order.Id}?subOrderId={subOrder.Id}'>
                                    <div class='modal-header'>
                                        <h5 class='modal-title'>Xác nhận đã nhận hàng</h5>
                                        <button type='button' class='close' data-dismiss='modal'><span>&times;</span></button>
                                    </div>
                                    <div class='modal-body'>
                                        Bạn chắc chắn đã nhận hàng từ <strong>{shopName}</strong>?
                                    </div>
                                    <div class='modal-footer'>
                                        <button type='button' class='btn btn-secondary' data-dismiss='modal'>Hủy</button>
                                        <button type='submit' class='btn btn-primary'>Xác nhận</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>";
            }

            html += "</div></div>";
            // html += "</hr>";
        }

        return html;
    }

    private string GetStatusBadge(SubOrderStatus status)
    {
        return status switch
        {
            SubOrderStatus.Pending => "<span class='badge badge-warning'>Đang xử lý</span>",
            SubOrderStatus.Shipping => "<span class='badge badge-info'>Đang giao</span>",
            SubOrderStatus.Delivered => "<span class='badge badge-primary'>Đã giao</span>",
            SubOrderStatus.Completed => "<span class='badge badge-success'>Hoàn tất</span>",
            SubOrderStatus.Cancelled => "<span class='badge badge-danger'>Đã hủy</span>",
            _ => "<span class='badge badge-secondary'>Không xác định</span>"
        };
    }
}
